{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst Initialstate = {\n  currency: {},\n  Amount: 0,\n  fromcurrency: 'USD',\n  tocurrency: 'INR',\n  convertedamount: '',\n  Loading: 'loading'\n};\nconst fetchapi = createAsyncThunk('converter/fetchapi', async () => {\n  const response = await fetch(`${'https://api.frankfurter.app'}/currencies`);\n  const data = await response.json();\n  console.log(data);\n  return data;\n});\nconst converterSlice = createSlice({\n  name: 'converter',\n  Initialstate: Initialstate,\n  reducers: {\n    setamount: (state, action) => {\n      state.Amount = action.payload;\n    },\n    setfromcurrency: (state, action) => {\n      state.fromcurrency = action.payload;\n    },\n    settocurrency: (state, action) => {\n      state.tocurrency = action.payload;\n    },\n    setconvertedamount: (state, action) => {\n      state.convertedamount = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchapi.pending, state => {\n      state.Loading = 'loading';\n    });\n    builder.addCase(fetchapi.fulfilled, (state, action) => {\n      state.Loading = 'succeded';\n      state.currency = action.payload;\n    });\n    builder.addCase(fetchapi.rejected, (state, action) => {\n      state.Loading = 'failed';\n    });\n  }\n});\nexport const {\n  setamount,\n  setfromcurrency,\n  settocurrency,\n  setconvertedamount\n} = converterSlice.actions;\nexport default converterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","Initialstate","currency","Amount","fromcurrency","tocurrency","convertedamount","Loading","fetchapi","response","fetch","data","json","console","log","converterSlice","name","reducers","setamount","state","action","payload","setfromcurrency","settocurrency","setconvertedamount","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["C:/Users/rkroc/OneDrive/Desktop/mentem projects/currency_converter/src/features/converter/converterSlice.jsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst Initialstate = {\r\n    currency : {},\r\n    Amount : 0,\r\n    fromcurrency:'USD',\r\n    tocurrency : 'INR',\r\n    convertedamount : '',\r\n    Loading : 'loading'\r\n}\r\n\r\nconst fetchapi = createAsyncThunk('converter/fetchapi' , async ()=>{\r\n\r\n    const response = await fetch(`${'https://api.frankfurter.app'}/currencies`)\r\n    const data = await response.json();\r\n    console.log(data)\r\n    return data ;\r\n})\r\n\r\nconst converterSlice = createSlice({\r\n    name : 'converter',\r\n    Initialstate:Initialstate,\r\n    reducers: {\r\n        setamount: (state,action) => {\r\n            state.Amount=action.payload\r\n        },\r\n        setfromcurrency: (state,action) => {\r\n            state.fromcurrency=action.payload\r\n        },\r\n        settocurrency: (state,action) => {\r\n            state.tocurrency=action.payload\r\n        },\r\n        setconvertedamount: (state,action) => {\r\n            state.convertedamount=action.payload\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchapi.pending, (state) => {\r\n            state.Loading='loading'\r\n        });\r\n        builder.addCase(fetchapi.fulfilled, (state,action) =>{\r\n            state.Loading='succeded'\r\n            state.currency = action.payload\r\n        })\r\n        builder.addCase(fetchapi.rejected, (state,action) => {\r\n            state.Loading='failed'\r\n        })\r\n    }\r\n})\r\n\r\nexport const {\r\n    setamount,\r\n    setfromcurrency,\r\n    settocurrency,\r\n    setconvertedamount,\r\n} = converterSlice.actions;\r\n\r\nexport default converterSlice.reducer;\r\n\r\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG;EACjBC,QAAQ,EAAG,CAAC,CAAC;EACbC,MAAM,EAAG,CAAC;EACVC,YAAY,EAAC,KAAK;EAClBC,UAAU,EAAG,KAAK;EAClBC,eAAe,EAAG,EAAE;EACpBC,OAAO,EAAG;AACd,CAAC;AAED,MAAMC,QAAQ,GAAGT,gBAAgB,CAAC,oBAAoB,EAAG,YAAU;EAE/D,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,6BAA6B,aAAa,CAAC;EAC3E,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EACjB,OAAOA,IAAI;AACf,CAAC,CAAC;AAEF,MAAMI,cAAc,GAAGf,WAAW,CAAC;EAC/BgB,IAAI,EAAG,WAAW;EAClBf,YAAY,EAACA,YAAY;EACzBgB,QAAQ,EAAE;IACNC,SAAS,EAAEA,CAACC,KAAK,EAACC,MAAM,KAAK;MACzBD,KAAK,CAAChB,MAAM,GAACiB,MAAM,CAACC,OAAO;IAC/B,CAAC;IACDC,eAAe,EAAEA,CAACH,KAAK,EAACC,MAAM,KAAK;MAC/BD,KAAK,CAACf,YAAY,GAACgB,MAAM,CAACC,OAAO;IACrC,CAAC;IACDE,aAAa,EAAEA,CAACJ,KAAK,EAACC,MAAM,KAAK;MAC7BD,KAAK,CAACd,UAAU,GAACe,MAAM,CAACC,OAAO;IACnC,CAAC;IACDG,kBAAkB,EAAEA,CAACL,KAAK,EAACC,MAAM,KAAK;MAClCD,KAAK,CAACb,eAAe,GAACc,MAAM,CAACC,OAAO;IACxC;EACJ,CAAC;EACDI,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CAACC,OAAO,CAACnB,QAAQ,CAACoB,OAAO,EAAGT,KAAK,IAAK;MACzCA,KAAK,CAACZ,OAAO,GAAC,SAAS;IAC3B,CAAC,CAAC;IACFmB,OAAO,CAACC,OAAO,CAACnB,QAAQ,CAACqB,SAAS,EAAE,CAACV,KAAK,EAACC,MAAM,KAAI;MACjDD,KAAK,CAACZ,OAAO,GAAC,UAAU;MACxBY,KAAK,CAACjB,QAAQ,GAAGkB,MAAM,CAACC,OAAO;IACnC,CAAC,CAAC;IACFK,OAAO,CAACC,OAAO,CAACnB,QAAQ,CAACsB,QAAQ,EAAE,CAACX,KAAK,EAACC,MAAM,KAAK;MACjDD,KAAK,CAACZ,OAAO,GAAC,QAAQ;IAC1B,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EACTW,SAAS;EACTI,eAAe;EACfC,aAAa;EACbC;AACJ,CAAC,GAAGT,cAAc,CAACgB,OAAO;AAE1B,eAAehB,cAAc,CAACiB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}