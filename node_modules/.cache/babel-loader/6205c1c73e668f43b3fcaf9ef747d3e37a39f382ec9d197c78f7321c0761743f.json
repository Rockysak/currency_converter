{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialstate = {\n  currency: {},\n  amount: 0,\n  fromCurrency: 'USD',\n  toCurrency: 'INR',\n  convertedAmount: '',\n  Loading: 'idle'\n};\nexport const fetchApi = createAsyncThunk('converter/fetchApi', async () => {\n  const res = await fetch(`${'https://api.frankfurter.app'}/currencies`);\n  const data = res.json();\n  console.log(data);\n  return data;\n});\nexport const convertercurrency = createAsyncThunk('dataconverter/convertercurrency', async ({\n  fromCurrency,\n  toCurrency,\n  amount\n}) => {\n  const res = await fetch(`https://api.frankfurter.app/latest?amount=${amount}&from=${fromCurrency}&to=${toCurrency}`);\n  const data = res.json();\n  console.log(toCurrency);\n  return data.rates[toCurrency];\n});\nconst converterSlice = createSlice({\n  name: 'converter',\n  initialState: initialstate,\n  reducers: {\n    setamount: (state, action) => {\n      state.amount = action.payload;\n    },\n    setfromcurrency: (state, action) => {\n      console.log(action);\n      state.fromCurrency = action.payload;\n    },\n    settocurrency: (state, action) => {\n      state.toCurrency = action.payload;\n    },\n    setconvertedamount: (state, action) => {\n      state.convertedAmount = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchApi.pending, state => {\n      state.Loading = 'loading';\n    });\n    builder.addCase(fetchApi.fulfilled, (state, action) => {\n      state.Loading = 'succeded';\n      state.currency = action.payload;\n    });\n    builder.addCase(fetchApi.rejected, state => {\n      state.Loading = 'failed';\n    });\n    builder.addCase(convertercurrency.pending, state => {\n      state.Loading = 'loading';\n    });\n    builder.addCase(convertercurrency.fulfilled, (state, action) => {\n      state.Loading = 'succeeded';\n      state.convertedAmount = action.payload;\n    });\n    builder.addCase(convertercurrency.rejected, state => {\n      state.Loading = 'failed';\n    });\n  }\n});\nexport const {\n  setamount,\n  setfromcurrency,\n  settocurrency,\n  setconvertedamount\n} = converterSlice.actions;\nexport default converterSlice.reducer;\n\n// import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\n// const initialstate = {\n//     currency : {},\n//     Amount : 0,\n//     fromcurrency:'USD',\n//     tocurrency : 'INR',\n//     convertedamount : '',\n//     Loading : 'loading'\n// }\n\n// const fetchApi = createAsyncThunk('converter/fetchApi' , async ()=>{\n\n//     const response = await fetch('https://api.frankfurter.app/currencies')\n//     const data = await response.json();\n//     console.log(data)\n//     return data ;\n// })\n\n// const converterSlice = createSlice({\n//     name : 'converter',\n//     Initialstate:initialstate,\n//     reducers: {\n//         setamount: (state,action) => {\n//             state.Amount=action.payload\n//         },\n//         setfromcurrency: (state,action) => {\n//             state.fromcurrency=action.payload\n//         },\n//         settocurrency: (state,action) => {\n//             state.tocurrency=action.payload\n//         },\n//         setconvertedamount: (state,action) => {\n//             state.convertedamount=action.payload\n//         }\n//     },\n//     extraReducers: (builder) => {\n//         builder.addCase(fetchApi.pending, (state) => {\n//             state.Loading='loading'\n//         });\n//         builder.addCase(fetchApi.fulfilled, (state,action) =>{\n//             state.Loading='succeded'\n//             state.currency = action.payload\n//         })\n//         builder.addCase(fetchApi.rejected, (state,action) => {\n//             state.Loading='failed'\n//         })\n//     }\n// })\n\n// export const {\n//     setamount,\n//     setfromcurrency,\n//     settocurrency,\n//     setconvertedamount,\n// } = converterSlice.actions;\n\n// export default converterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialstate","currency","amount","fromCurrency","toCurrency","convertedAmount","Loading","fetchApi","res","fetch","data","json","console","log","convertercurrency","rates","converterSlice","name","initialState","reducers","setamount","state","action","payload","setfromcurrency","settocurrency","setconvertedamount","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["C:/Users/rkroc/OneDrive/Desktop/mentem projects/currency_converter/src/features/converter/converterSlice.jsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"\r\n\r\n\r\nconst initialstate = {\r\n\r\n    currency:{} ,\r\n    amount:0,\r\n    fromCurrency:'USD',\r\n    toCurrency:'INR',\r\n    convertedAmount:'',\r\n    Loading:'idle'\r\n}\r\n\r\nexport const fetchApi = createAsyncThunk('converter/fetchApi' , async () => {\r\n    const res = await fetch(`${'https://api.frankfurter.app'}/currencies`);\r\n    const data = res.json();\r\n    console.log(data)\r\n    return data;\r\n})\r\n\r\nexport const convertercurrency = createAsyncThunk('dataconverter/convertercurrency' , async ({fromCurrency,toCurrency,amount}) => {\r\n    const res = await fetch(`https://api.frankfurter.app/latest?amount=${amount}&from=${fromCurrency}&to=${toCurrency}`);\r\n    const data = res.json();\r\n    console.log(toCurrency)\r\n    return data.rates[toCurrency];\r\n})\r\n\r\nconst converterSlice = createSlice({\r\n    name: 'converter',\r\n    initialState:initialstate,\r\n    reducers:{\r\n        setamount:(state,action) => {\r\n            state.amount=action.payload;\r\n        },\r\n        setfromcurrency:(state,action) => {\r\n            console.log(action)\r\n            state.fromCurrency=action.payload;\r\n        },\r\n        settocurrency:(state,action) =>{\r\n            state.toCurrency=action.payload;\r\n        },\r\n        setconvertedamount:(state,action) => {\r\n            state.convertedAmount=action.payload;\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchApi.pending,(state) => {\r\n            state.Loading = 'loading';\r\n        })\r\n        builder.addCase(fetchApi.fulfilled,(state,action) => {\r\n            state.Loading = 'succeded';\r\n            state.currency = action.payload;\r\n        })\r\n        builder.addCase(fetchApi.rejected,(state) => {\r\n\r\n            state.Loading = 'failed';\r\n        })\r\n        builder.addCase(convertercurrency.pending,(state) => {\r\n            state.Loading = 'loading';\r\n        })\r\n        builder.addCase(convertercurrency.fulfilled,(state,action) => {\r\n            state.Loading = 'succeeded';\r\n            state.convertedAmount=action.payload;\r\n        })\r\n        builder.addCase(convertercurrency.rejected,(state) => {\r\n            state.Loading = 'failed';\r\n        })\r\n    }\r\n})\r\n\r\nexport const {\r\n    setamount,\r\n    setfromcurrency,\r\n    settocurrency,\r\n    setconvertedamount,\r\n} = converterSlice.actions\r\n\r\nexport default converterSlice.reducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// const initialstate = {\r\n//     currency : {},\r\n//     Amount : 0,\r\n//     fromcurrency:'USD',\r\n//     tocurrency : 'INR',\r\n//     convertedamount : '',\r\n//     Loading : 'loading'\r\n// }\r\n\r\n// const fetchApi = createAsyncThunk('converter/fetchApi' , async ()=>{\r\n\r\n//     const response = await fetch('https://api.frankfurter.app/currencies')\r\n//     const data = await response.json();\r\n//     console.log(data)\r\n//     return data ;\r\n// })\r\n\r\n// const converterSlice = createSlice({\r\n//     name : 'converter',\r\n//     Initialstate:initialstate,\r\n//     reducers: {\r\n//         setamount: (state,action) => {\r\n//             state.Amount=action.payload\r\n//         },\r\n//         setfromcurrency: (state,action) => {\r\n//             state.fromcurrency=action.payload\r\n//         },\r\n//         settocurrency: (state,action) => {\r\n//             state.tocurrency=action.payload\r\n//         },\r\n//         setconvertedamount: (state,action) => {\r\n//             state.convertedamount=action.payload\r\n//         }\r\n//     },\r\n//     extraReducers: (builder) => {\r\n//         builder.addCase(fetchApi.pending, (state) => {\r\n//             state.Loading='loading'\r\n//         });\r\n//         builder.addCase(fetchApi.fulfilled, (state,action) =>{\r\n//             state.Loading='succeded'\r\n//             state.currency = action.payload\r\n//         })\r\n//         builder.addCase(fetchApi.rejected, (state,action) => {\r\n//             state.Loading='failed'\r\n//         })\r\n//     }\r\n// })\r\n\r\n// export const {\r\n//     setamount,\r\n//     setfromcurrency,\r\n//     settocurrency,\r\n//     setconvertedamount,\r\n// } = converterSlice.actions;\r\n\r\n// export default converterSlice.reducer;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}