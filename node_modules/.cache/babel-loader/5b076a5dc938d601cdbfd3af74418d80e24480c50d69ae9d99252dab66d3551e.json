{"ast":null,"code":"\n\n// import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\n// const initialstate = {\n//     currency : {},\n//     Amount : 0,\n//     fromcurrency:'USD',\n//     tocurrency : 'INR',\n//     convertedamount : '',\n//     Loading : 'loading'\n// }\n\n// const fetchApi = createAsyncThunk('converter/fetchApi' , async ()=>{\n\n//     const response = await fetch('https://api.frankfurter.app/currencies')\n//     const data = await response.json();\n//     console.log(data)\n//     return data ;\n// })\n\n// const converterSlice = createSlice({\n//     name : 'converter',\n//     Initialstate:initialstate,\n//     reducers: {\n//         setamount: (state,action) => {\n//             state.Amount=action.payload\n//         },\n//         setfromcurrency: (state,action) => {\n//             state.fromcurrency=action.payload\n//         },\n//         settocurrency: (state,action) => {\n//             state.tocurrency=action.payload\n//         },\n//         setconvertedamount: (state,action) => {\n//             state.convertedamount=action.payload\n//         }\n//     },\n//     extraReducers: (builder) => {\n//         builder.addCase(fetchApi.pending, (state) => {\n//             state.Loading='loading'\n//         });\n//         builder.addCase(fetchApi.fulfilled, (state,action) =>{\n//             state.Loading='succeded'\n//             state.currency = action.payload\n//         })\n//         builder.addCase(fetchApi.rejected, (state,action) => {\n//             state.Loading='failed'\n//         })\n//     }\n// })\n\n// export const {\n//     setamount,\n//     setfromcurrency,\n//     settocurrency,\n//     setconvertedamount,\n// } = converterSlice.actions;\n\n// export default converterSlice.reducer;","map":{"version":3,"names":[],"sources":["C:/Users/rkroc/OneDrive/Desktop/mentem projects/currency_converter/src/features/converter/converterSlice.jsx"],"sourcesContent":["\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// const initialstate = {\r\n//     currency : {},\r\n//     Amount : 0,\r\n//     fromcurrency:'USD',\r\n//     tocurrency : 'INR',\r\n//     convertedamount : '',\r\n//     Loading : 'loading'\r\n// }\r\n\r\n// const fetchApi = createAsyncThunk('converter/fetchApi' , async ()=>{\r\n\r\n//     const response = await fetch('https://api.frankfurter.app/currencies')\r\n//     const data = await response.json();\r\n//     console.log(data)\r\n//     return data ;\r\n// })\r\n\r\n// const converterSlice = createSlice({\r\n//     name : 'converter',\r\n//     Initialstate:initialstate,\r\n//     reducers: {\r\n//         setamount: (state,action) => {\r\n//             state.Amount=action.payload\r\n//         },\r\n//         setfromcurrency: (state,action) => {\r\n//             state.fromcurrency=action.payload\r\n//         },\r\n//         settocurrency: (state,action) => {\r\n//             state.tocurrency=action.payload\r\n//         },\r\n//         setconvertedamount: (state,action) => {\r\n//             state.convertedamount=action.payload\r\n//         }\r\n//     },\r\n//     extraReducers: (builder) => {\r\n//         builder.addCase(fetchApi.pending, (state) => {\r\n//             state.Loading='loading'\r\n//         });\r\n//         builder.addCase(fetchApi.fulfilled, (state,action) =>{\r\n//             state.Loading='succeded'\r\n//             state.currency = action.payload\r\n//         })\r\n//         builder.addCase(fetchApi.rejected, (state,action) => {\r\n//             state.Loading='failed'\r\n//         })\r\n//     }\r\n// })\r\n\r\n// export const {\r\n//     setamount,\r\n//     setfromcurrency,\r\n//     settocurrency,\r\n//     setconvertedamount,\r\n// } = converterSlice.actions;\r\n\r\n// export default converterSlice.reducer;\r\n\r\n"],"mappings":";;AAuBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}